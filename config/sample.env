DEEPSEEK_API_KEY=
DEEPSEEK_BASE_URL=https://api.deepseek.com
HYPEREVM_RPC=https://api.hyperliquid-testnet.xyz/evm
PRJX_SUBGRAPH=https://api.goldsky.com/api/public/project_cmbbm2iwckb1b01t39xed236t/subgraphs/uniswap-v3-hyperevm-position/prod/gn
REDIS_URL=redis://127.0.0.1:6379/0
REDIS_CHANNEL=arb:realtime

# ================= Goldsky / GraphQL =================
# Mode: 'graphql' to query Goldsky subgraphs via HTTP POST
GOLDSKY_MODE=graphql
# Public or private GN endpoint (fill in your values)
# Example (public):
# GOLDSKY_GQL_URL=https://api.goldsky.com/api/public/{project_id}/subgraphs/{subgraph_name}/{tag}/gn
# Example (private):
# GOLDSKY_GQL_URL=https://api.goldsky.com/api/private/{project_id}/subgraphs/{subgraph_name}/{tag}/gn

# Auth header configuration
# For private endpoints: Authorization: Bearer <token>
GOLDSKY_API_HEADER=Authorization
GOLDSKY_API_PREFIX=Bearer 
GOLDSKY_API_KEY=

# Optional: customize query and items path if your schema differs
# Default query expects pool(id) { reserves(first:, orderBy: timestamp, orderDirection: desc) { ... } }
#GOLDSKY_GQL_QUERY="""
#query ReserveData($poolId: ID!, $limit: Int!) {
#  pool(id: $poolId) {
#    reserves(first: $limit, orderBy: timestamp, orderDirection: desc) {
#      timestamp
#      reserve0
#      reserve1
#    }
#  }
#}
#"""
# Path to the array of items inside the GraphQL response
GOLDSKY_GQL_ITEMS_PATH=data.pool.reserves

# Cache TTL for pool history (seconds)
GOLDSKY_CACHE_TTL_SEC=30

# ================= Goldsky / REST (optional) =================
# Set mode to 'rest' to use REST-style endpoints
# GOLDSKY_MODE=rest
# Base API URL for REST provider
# GOLDSKY_API_URL=
# Path template to fetch reserves for a pool (must include {pool_id})
# GOLDSKY_POOL_RES_PATH=pools/{pool_id}/reserves

# ================= Pool IDs (reference) =================
# These are example placeholders for Hyperliquid EVM pool IDs. Replace with real IDs.
# Not directly consumed by the backend; used as reference for UI/manual testing.
# HYPE_USDC_POOL_ID=
# HYPE_uETH_POOL_ID=
# KHYPE_HYPE_POOL_ID=

# ================= HyperLend / Flash Loan (placeholders) =================
# DO NOT hardcode production keys in this file. Replace with real addresses per network.
# HyperLend pool and deployed executor contract
# HYPERLEND_POOL=
# ARB_EXECUTOR_ADDRESS=

# Evaluator cost params (USD/percentage)
# FLASH_FEE_BPS=0           # proportional fee on notional (basis points)
# REFERRAL_BPS=0            # optional referral on notional (basis points)
# FLASH_FIXED_USD=0         # fixed overhead per flash loan in USD
# EXECUTOR_FEE_USD=0        # off-chain/on-chain service fee in USD

# ================= TS Eval Service / Risk Model =================
# TypeScript evaluation server port
# TS_API_PORT=8082

# Latency & fill
# EDGE_DECAY_BPS_PER_SEC=3
# BASE_FILL_PROB=0.9
# FILL_THETA=0.15

# Slippage (empirical defaults)
# SLIP_ALPHA=1.25
# SLIP_K=0.9

# Stochastic frictions
# GAS_USD_STD=0.2
# ADVERSE_USD_STD=0.2
# MEV_PENALTY_USD=0

# Risk preference (mean-variance)
# RISK_AVERSION_LAMBDA=0
